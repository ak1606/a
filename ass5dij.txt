
import java.util.*;

class Edge1 {
  int destination;
  int weight;

  public Edge1(int destination, int weight) {
    this.destination = destination;
    this.weight = weight;
  }
}

class Graph1 {
  int V;
  List<List<Edge1>> adjList;

  public Graph1(int V) {
    this.V = V;
    adjList = new ArrayList<>(V);
    for (int i = 0; i < V; i++) {
      adjList.add(new ArrayList<>());
    }
  }

  public void addEdge(int source, int destination, int weight) {
    adjList.get(source).add(new Edge1(destination, weight));
  }

  public List<Integer> dijkstra(int source, int destination) {
    PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
    pq.offer(new int[] { source, 0 });

    int[] distances = new int[V];
    Arrays.fill(distances, Integer.MAX_VALUE);
    distances[source] = 0;
    int[] parent = new int[V];
    Arrays.fill(parent, -1);

    while (!pq.isEmpty()) {
      int[] curr = pq.poll();
      int u = curr[0];
      int dist = curr[1];

      if (u == destination) {
        break;
      }
      if (dist > distances[u]) {
        continue;
      }
      for (Edge1 edge : adjList.get(u)) {
        int v = edge.destination;
        int weight = edge.weight;

        if (dist + weight < distances[v]) {
          distances[v] = dist + weight;
          parent[v] = u;
          pq.offer(new int[] { v, distances[v] });
        }
      }
    }

    List<Integer> shortestPath = new ArrayList<>();
    int current = destination;
    while (current != -1) {
      shortestPath.add(current);
      current = parent[current];
    }
    Collections.reverse(shortestPath);
    return shortestPath;

  }
}

public class Assig5 {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    Graph1 graph = null;
    while (true) {
      System.out.println("MENU");
      System.out.println("1. Create graph");
      System.out.println("2. Find shortest Path");
      System.out.println("3. Exit");
      System.out.println("Enter your choice (1-3):");
      int choice = sc.nextInt();

      switch (choice) {
        case 1:
          System.out.println("Enter number of vertices of the graph: ");
          int V = sc.nextInt();
          graph = new Graph1(V);
          System.out.println("Enter the number of edges in graph: ");
          int E = sc.nextInt();

          System.out.println("Enter details of each edge (source, destination, weight): ");
          for (int i = 0; i < E; i++) {
            int src = sc.nextInt();
            int dest = sc.nextInt();
            int weight = sc.nextInt();
            graph.addEdge(src, dest, weight);
          }
          break;

        case 2:
          if (graph == null) {
            System.out.println("Create graph first");
            break;
          }
          int source, destination;
          System.out.println("Enter source node: ");
          source = sc.nextInt();
          System.out.println("Enter the destination node: ");
          destination = sc.nextInt();
          List<Integer> shortestPath = graph.dijkstra(source, destination);
          System.out.println("Shortest path from source : " + source + " to destination: " + destination + ": ");
          for (int node : shortestPath) {
            System.out.print(node + " ");
          }
          break;

        case 3:
          System.out.println("BYE");
          sc.close();
          System.exit(0);
          break;

        default:
          System.out.println("Invalid choice");
          break;
      }
    }
  }
}
