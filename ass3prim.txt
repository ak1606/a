import java.util.*;

class Edge implements Comparable<Edge> {
  int src, dest, weight;

  Edge(int src, int dest, int weight) {
    this.src = src;
    this.dest = dest;
    this.weight = weight;
  }

  @Override
  public int compareTo(Edge other) {
    return this.weight - other.weight;
  }
}

class Graph {
  int V;
  List<Edge> graph[];

  Graph(int V) {
    this.V = V;
    graph = new ArrayList[V];

    for (int i = 0; i < V; i++) {
      graph[i] = new ArrayList<>();
    }
  }

  public void addEdge(int src, int dest, int weight) {
    graph[src].add(new Edge(src, dest, weight));
    graph[dest].add(new Edge(src, dest, weight));
  }

  public int minSpanningTree() {
    boolean inMst[] = new boolean[V];
    int parent[] = new int[V];
    int key[] = new int[V];

    Arrays.fill(key, Integer.MAX_VALUE);

    PriorityQueue<Edge> pq = new PriorityQueue<>();
    key[0] = 0;
    pq.add(new Edge(0, 0, 0));

    while (!pq.isEmpty()) {
      int u = pq.poll().dest;
      inMst[u] = true;

      for (int i = 0; i < graph[u].size(); i++) {
        Edge e = graph[u].get(i);

        int v = e.dest;
        int weight = e.weight;
        if (!inMst[v] && weight < key[v]) {
          key[v] = weight;
          pq.add(new Edge(u, v, key[v]));
          parent[v] = u;
        }

      }
    }

    for (int i = 1; i < V; i++) {
      System.out.println(parent[i] + " - " + i + " : " + key[i]);
    }

    int totalWeight = 0;
    for (int i = 1; i < V; i++) {
      totalWeight += key[i];
    }
    return totalWeight;
  }
}

public class Assig3 {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    System.out.println("-----------------------------------");
    System.out.println("******************Finding MST using Prim's Algorithm*****************");
    System.out.println("Enter number of vertices: ");
    int v = sc.nextInt();

    Graph G1 = new Graph(v);
    System.out.println("Enter number of Edges: ");
    int e = sc.nextInt();
    System.out.println("Enter the details of each edge (source, destination,weight) : ");
    for (int i = 0; i < e; i++) {
      int src = sc.nextInt();
      int dest = sc.nextInt();
      int weight = sc.nextInt();
      G1.addEdge(src, dest, weight);
    }
    System.out.println("One of the Spanning Tree is: ");
    int totalWeight = G1.minSpanningTree();
    System.out.println("Total weight of MST: " + totalWeight);
  }
}
